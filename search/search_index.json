{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Resolu\u00e7\u00e3o Dos Desafios","text":"<p>O projeto era composto por 9 desafios, irei descrever o que eu fiz para solucionar todos eles</p>"},{"location":"#desafio-1","title":"Desafio 1","text":"<p>Modificar a aplica\u00e7\u00e3o para consumir uma vari\u00e1vel de ambiente chamada <code>NAME</code> e, no lugar de \"World\", exibir o valor dessa vari\u00e1vel.</p> <p>O primeiro desafio tinha como adicionar um vari\u00e1vel de ambiente no projeto Flask, seguindo a documenta\u00e7\u00e3o do Flask eu criei um arquivo <code>settings.py</code> par apode configurar todas as varipaveis de ambiente do projeto e uso o pr\u00f3prio Flask, com o dotenv, para poder inicializar e distribuir as vari\u00e1veis pelo projeto.</p>"},{"location":"#issues","title":"Issues","text":"<ul> <li>#3</li> </ul>"},{"location":"#desafio-2","title":"Desafio 2","text":"<p>Modificar o arquivo <code>.gitignore</code> para que seja adequado a uma aplica\u00e7\u00e3o Python.</p> <p>Ao longo do desafio eu fui adicionando no <code>.gitignore</code> arquivos de caches e de builds onde sujaria a o diret\u00f3rio do git e ficaria pesado o projeto, tamb\u00e9m adicionei os arquivos que configura as vari\u00e1veis de ambiente tanto da aplica\u00e7\u00e3o quanto do Flask e por \u00faltimo os arquivos que mostra a cobertura dos testes do projeto.</p>"},{"location":"#issues_1","title":"Issues","text":"<ul> <li>#1</li> </ul>"},{"location":"#desafio-3","title":"Desafio 3","text":"<p>Elaborar, implementar e refor\u00e7ar o fluxo de desenvolvimento do reposit\u00f3rio.</p> <p>O fluxo que eu elaborei \u00e9 um ciclo r\u00e1pido e com foco de sempre entregar as \u00faltimas altera\u00e7\u00f5es para o usu\u00e1rio, ele n\u00e3o \u00e9 recomendado para todos os tipos de projetos, principalmente para grande projetos ou/e que tenha uma alta taxa de altera\u00e7\u00e3o. Por\u00e9m para o nosso projeto de teste ele serve \u00e9 perfeitamente para termos as \u00faltimas altera\u00e7\u00f5es em produ\u00e7\u00e3o</p>"},{"location":"#issues_2","title":"Issues","text":"<ul> <li>#9</li> </ul>"},{"location":"#ciclo","title":"Ciclo","text":"<ol> <li>Desenvolvedor ir\u00e1 abrir uma issue descrevendo o que ser\u00e1 feito</li> <li>Desenvolvedor criar uma branch com as seguintes caracter\u00edsticas:<ul> <li><code>&lt;nome_usuario&gt;/&lt;tipo_pr&gt;/&lt;a\u00e7\u00e3o&gt;</code></li> <li>exemplo: <code>joao/feature/verificacao_usuario</code></li> <li>O Jo\u00e3o ira adicionar uma nova funcionalidade no projeto para fazer verifica\u00e7\u00e3o de usu\u00e1rio</li> </ul> </li> <li>A cada commit ir\u00e1 ser executado o hook de <code>pre-commit</code></li> <li>Desenvolvedor ir\u00e1 criar um novo Pull Request(PR) apontado para fechar automaticamente a issue criada</li> <li>Atrav\u00e9s do Github Actions ir\u00e1 fazer as seguintes verifica\u00e7\u00f5es do PR:<ul> <li>Verificar o lint</li> <li>Verificar os testes</li> <li>Rodar os testes</li> </ul> </li> <li>Atrav\u00e9s do Github Actions ir\u00e1 subir um deploy exclusivo para o \u00faltimo commit</li> <li>Desenvolvedor ir\u00e1 fazer testes pr\u00f3prios nesse novo deploy</li> <li>Depois que todas as a\u00e7\u00f5es do Github Actions estiverem Okay poder\u00e1 fazer merge na branch main</li> <li>Atrav\u00e9s do Github Actions ir\u00e1 subit um deploy em modo de produ\u00e7\u00e3o</li> <li>Semanalmente ir\u00e1 rodar um Github Actions para criar a tag da semana</li> <li>Caso seja detectado algum bug/problema na branch principal dever\u00e1 rodar manualmente a Action de deploy na \u00faltima tag okay</li> </ol>"},{"location":"#issues_3","title":"Issues","text":"<ul> <li>#7</li> <li>#12</li> <li>#19</li> <li>#20</li> </ul>"},{"location":"#desafio-4","title":"Desafio 4","text":"<p>Consolidar boas pr\u00e1ticas no reposit\u00f3rio atrav\u00e9s de ferramentas de an\u00e1lise est\u00e1tica, hooks de pr\u00e9-commit, etc. a seu crit\u00e9rio.</p> <p>Adicionei v\u00e1rias Github Actions para fazer verificar testes, lint do projeto e o semgrep em todo PR e push, tamb\u00e9m criei um <code>precommit</code> para rodas essas a\u00e7\u00f5es em cada commit assim aliviando o Github Actions.</p>"},{"location":"#lints-usados","title":"Lints usados","text":"<ul> <li>black</li> <li>flake8</li> <li>isort</li> </ul>"},{"location":"#teste","title":"Teste","text":"<p>Usei a biblioteca pytest para fazer testes unit\u00e1rios e fazer relat\u00f3rios de cobertura.</p>"},{"location":"#issues_4","title":"Issues","text":"<ul> <li>#5</li> <li>#7</li> <li>#9</li> <li>#12</li> <li>#19</li> </ul>"},{"location":"#desafio-5","title":"Desafio 5","text":"<p>Preparar a aplica\u00e7\u00e3o para que seja production-ready.</p> <p>Usando o <code>Makefile</code> eu criei uma task para fazer o deploy da aplica\u00e7\u00e3o usando gunicorn, al\u00e9m de rodar Github Actions em cada PR e lints/semgrep/testes em cada <code>precommit</code>. Para rodar o deploy basta rodar:</p> <pre><code>make deploy\n</code></pre> <p>Com isso ir\u00e1 instalar todas as depend\u00eancias e iniciar a aplica\u00e7\u00e3o em modo produ\u00e7\u00e3o na porta <code>8080</code></p>"},{"location":"#issues_5","title":"Issues","text":"<ul> <li>#21</li> <li>#22</li> <li>#23</li> </ul>"},{"location":"#desafio-6","title":"Desafio 6","text":"<p>Criar arquivos e scripts para que a aplica\u00e7\u00e3o possa ser executada em um container.</p> <p>Eu usei o <code>make</code> para realizar todos os scripts do proejto, o motivo de utiliza\u00e7\u00e3o \u00e9 pela f\u00e1cil implementa\u00e7\u00e3o de scripts e de est\u00e1 dispon\u00edvel em quase todas as aplica\u00e7\u00f5es linux por padr\u00e3o. Com a cria\u00e7\u00e3o do <code>Makefile</code> foi de f\u00e1cil implementa\u00e7\u00e3o do Dockerfile e docker-compose. Para iniciar o containeir basta rodar:</p> <pre><code>make docker\n</code></pre> <p>Com isso ir\u00e1 instalar todas as depend\u00eancias e iniciar a aplica\u00e7\u00e3o em modo produ\u00e7\u00e3o na porta <code>8080</code></p>"},{"location":"#issues_6","title":"Issues","text":"<ul> <li>#9</li> <li>#22</li> <li>#23</li> </ul>"},{"location":"#desafio-7","title":"Desafio 7","text":"<p>Elaborar um modelo de desenvolvimento que permita a execu\u00e7\u00e3o da aplica\u00e7\u00e3o em um ambiente de desenvolvimento local.</p> <p>Usando os pr\u00f3prio <code>make</code> podemos roda a aplica\u00e7\u00e3o em desenvolvimento com:</p> <pre><code>make run\n</code></pre> <p>Com isso ir\u00e1 instalar todas as depend\u00eancias e iniciar a aplica\u00e7\u00e3o em modo desenvolvimento na porta <code>8080</code></p>"},{"location":"#issues_7","title":"Issues","text":"<ul> <li>#1</li> </ul>"},{"location":"#desafio-8","title":"Desafio 8","text":"<p>Construir pipelines de CI/CD para a aplica\u00e7\u00e3o utilizando GitHub Actions. Esse item possui forte rela\u00e7\u00e3o com o fluxo de desenvolvimento, pois deve compreender o deployment em dois ambientes diferentes: homologa\u00e7\u00e3o e produ\u00e7\u00e3o. O deployment da aplica\u00e7\u00e3o deve ser realizado em um servi\u00e7o serverless da Google Cloud Platform.</p> <p>Eu criei 2 Github Actions para subir um deploy exclusivo para cada commit no PR com sua URL sendo disponibilizado com um coment\u00e1rio no PR e um deploy para cada vez que a branch main \u00e9 atualizada. A aplica\u00e7\u00e3o de produ\u00e7\u00e3o pode ser acessado em https://production-t3kr3ajj2q-uc.a.run.app.</p>"},{"location":"#issues_8","title":"Issues","text":"<ul> <li>#9</li> <li>#22</li> <li>#23</li> </ul>"},{"location":"#desafio-9","title":"Desafio 9","text":"<p>Documentar todo o processo, as pipelines e o fluxo de desenvolvimento do reposit\u00f3rio, al\u00e9m de hospedar essa documenta\u00e7\u00e3o em uma p\u00e1gina do GitHub Pages.</p> <p>Usando mkdocs criei a document\u00e7\u00e3o de todo o proejto, al\u00e9m de utilizar as ferramentas de Issues e Pull Requests do Github.</p>"},{"location":"#issues_9","title":"Issues","text":"<ul> <li>#27</li> </ul>"}]}